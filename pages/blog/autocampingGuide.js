'use client'

import React from 'react'
import { LanguageProvider, useLanguage } from "@/app/LanguageContext"
import Header from "@/app/components/Header"
import { store } from "@/app/store"
import { Provider } from "react-redux"
import { Box, Typography, Container, Button, Chip, List, ListItem, ListItemIcon, Paper, useTheme, useMediaQuery, Grid } from '@mui/material'
import Link from 'next/link'
import RelatedPosts from './components/RelatedPosts'
import { 
  DirectionsCar,
  Place,
  Landscape,
  Wc,
  ElectricalServices,
  WaterDrop,
  Wifi,
  Restaurant,
  Shower,
  Pets,
  ArrowBack,
  CheckCircle
} from '@mui/icons-material'
import Footer from "@/app/components/Footer"
import Head from 'next/head'

const AUTOCAMPING_CONTENT = {
  ua: {
    title: "–ê–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥–∏ –¥–ª—è –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—ñ–≤",
    metaDescription: "üöô –ù–∞–π–∫—Ä–∞—â—ñ –∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥–∏ –£–∫—Ä–∞—ó–Ω–∏ –¥–ª—è –∞–≤—Ç–æ—Ç—É—Ä–∏—Å—Ç—ñ–≤. –ü–æ–≤–Ω–∏–π –≥—ñ–¥ –∑ –º—ñ—Å—Ü—è–º–∏ –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è, –Ω–æ—á—ñ–≤–ª—ñ —Ç–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –≤ –¥–æ—Ä–æ–∑—ñ.",
    subtitle: "–í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–ª—è —Å–µ–±–µ –Ω–∞–π–∫—Ä–∞—â—ñ –º—ñ—Å—Ü—è –¥–ª—è –∞–≤—Ç–æ—Ç—É—Ä–∏—Å—Ç—ñ–≤",
    intro: "–ê–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥ - —ñ–¥–µ–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø–æ–¥–æ—Ä–æ–∂—É—î –Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ. –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –Ω–µ –ª–∏—à–µ –º—ñ—Å—Ü–µ –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è, –∞ –π –≤—Å—ñ –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –ø—ñ–¥ —á–∞—Å –ø–æ–¥–æ—Ä–æ–∂—ñ.",
    benefitsTitle: "–ß–æ–º—É –≤–∞—Ä—Ç–æ –≤–∏–±–∏—Ä–∞—Ç–∏ –∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥–∏?",
    benefits: [
      "–ó—Ä—É—á–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–æ—á—ñ–≤–ª—ñ",
      "–î–æ—Å—Ç—É–ø –¥–æ –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ —Ç–∞ –≤–æ–¥–∏",
      "–°–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –≤—É–∑–ª–∏ —Ç–∞ –¥—É—à–æ–≤—ñ",
      "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –≤ –º–∞–ª—å–æ–≤–Ω–∏—á–∏—Ö –ª–æ–∫–∞—Ü—ñ—è—Ö",
      "–ó–Ω–∞–π–æ–º—Å—Ç–≤–∞ –∑ –æ–¥–Ω–æ–¥—É–º—Ü—è–º–∏"
    ],
    typesTitle: "–í–∏–¥–∏ –∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥—ñ–≤",
    types: [
      {
        name: "–õ—ñ—Å–æ–≤—ñ –∫–µ–º–ø—ñ–Ω–≥–∏",
        desc: "–Ü–¥–µ–∞–ª—å–Ω—ñ –¥–ª—è –ª—é–±–∏—Ç–µ–ª—ñ–≤ –ø—Ä–∏—Ä–æ–¥–∏ —Ç–∞ —Ç–∏—à—ñ",
        features: ["–†–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –≤ –ª—ñ—Å–∞—Ö", "–ü—Ä–∏—Ä–æ–¥–Ω—ñ –≤–æ–¥–æ–π–º–∏ –ø–æ—Ä—É—á", "–ï–∫–æ—Ç—Ä–æ–ø–∏"],
        icon: <Landscape />
      },
      {
        name: "–ë—ñ–ª—è –≤–æ–¥–æ–π–º",
        desc: "–î–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ª—é–±–∏—Ç—å –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –±—ñ–ª—è –≤–æ–¥–∏",
        features: ["–ü–ª—è–∂—ñ", "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–∏–±–æ–ª–æ–≤–ª—ñ", "–ü—Ä–æ–≥—É–ª—è–Ω–∫–∏ –Ω–∞ —á–æ–≤–Ω–∞—Ö"],
        icon: <WaterDrop />
      },
      {
        name: "–¢—É—Ä–∏—Å—Ç–∏—á–Ω—ñ –±–∞–∑–∏",
        desc: "–ó —Ä–æ–∑–≤–∏–Ω–µ–Ω–æ—é —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é",
        features: ["–ö–∞—Ñ–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "–ú–∞–π–¥–∞–Ω—á–∏–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É", "–î–∏—Ç—è—á—ñ –∑–æ–Ω–∏"],
        icon: <Restaurant />
      }
    ],
    tipsTitle: "–Ø–∫ –≤–∏–±—Ä–∞—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥?",
    tips: [
      "–í–∏–∑–Ω–∞—á—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–¥–æ—Ä–æ–∂—ñ —Ç–∞ –º—ñ—Å—Ü–µ –∑—É–ø–∏–Ω–∫–∏",
      "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π",
      "–î—ñ–∑–Ω–∞–π—Ç–µ—Å—å –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ (–ø—Ä–æ–∫–∞—Ç, —ó–∂–∞)",
      "–û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥–≥—É–∫–∏ —ñ–Ω—à–∏—Ö –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—ñ–≤",
      "–£—Ç–æ—á–Ω—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ —É–º–æ–≤–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è"
    ],
    backButton: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–ª–æ–≥—É",
    features: [
      { icon: <DirectionsCar />, label: "–ü–∞—Ä–∫–æ–≤–∫–∞" },
      { icon: <ElectricalServices />, label: "–ï–ª–µ–∫—Ç—Ä–∏–∫–∞" },
      { icon: <Wc />, label: "–°–∞–Ω–≤—É–∑–ª–∏" },
      { icon: <Shower />, label: "–î—É—à–æ–≤—ñ" },
      { icon: <Wifi />, label: "Wi-Fi" },
      { icon: <Pets />, label: "Pet-friendly" }
    ],
    regionsTitle: "–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥—ñ–≤",
    regions: [
      {
        name: "–ö–∞—Ä–ø–∞—Ç–∏",
        description: "–ú–∞–≥–Ω—ñ—Ç –¥–ª—è –ª—é–±–∏—Ç–µ–ª—ñ–≤ –≥—ñ—Ä —Ç–∞ –µ–∫–æ—Ç—É—Ä–∏–∑–º—É"
      },
      {
        name: "–ü–æ–¥—ñ–ª–ª—è",
        description: "–ú–∞–ª–µ–Ω—å–∫—ñ –∑–∞—Ç–∏—à–Ω—ñ –∫–µ–º–ø—ñ–Ω–≥–∏ —Å–µ—Ä–µ–¥ –ø—Ä–∏—Ä–æ–¥–∏"
      },
      {
        name: "–ü—ñ–≤–¥–µ–Ω—å –£–∫—Ä–∞—ó–Ω–∏",
        description: "–ö–µ–º–ø—ñ–Ω–≥–∏ –±—ñ–ª—è –º–æ—Ä—è —Ç–∞ –ª–∏–º–∞–Ω—ñ–≤"
      },
      {
        name: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        description: "–ó—Ä—É—á–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è –Ω–µ–¥–æ–≤–≥–∏—Ö –≤–∏—ó–∑–¥—ñ–≤"
      }
    ]
  },
  ru: {
    title: "–ê–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–∏ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤",
    metaDescription: "üöô –õ—É—á—à–∏–µ –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–∏ –£–∫—Ä–∞–∏–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Ç—É—Ä–∏—Å—Ç–æ–≤. –ü–æ–ª–Ω—ã–π –≥–∏–¥ —Å –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏, –Ω–æ—á–µ–≤–∫–∏ –∏ –æ—Ç–¥—ã—Ö–∞ –≤ –¥–æ—Ä–æ–≥–µ.",
    subtitle: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ç—É—Ä–∏—Å—Ç–æ–≤",
    intro: "–ê–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥ - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –º–µ—Å—Ç–æ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏, –Ω–æ –∏ –≤—Å–µ —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –≤–æ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.",
    benefitsTitle: "–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–∏?",
    benefits: [
      "–£–¥–æ–±–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ –∏ –Ω–æ—á–µ–≤–∫–∏",
      "–î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤—É –∏ –≤–æ–¥–µ",
      "–°–∞–Ω—É–∑–ª—ã –∏ –¥—É—à–µ–≤—ã–µ",
      "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤ –∂–∏–≤–æ–ø–∏—Å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö",
      "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏"
    ],
    typesTitle: "–í–∏–¥—ã –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–æ–≤",
    types: [
      {
        name: "–õ–µ—Å–Ω—ã–µ –∫–µ–º–ø–∏–Ω–≥–∏",
        desc: "–ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ —Ç–∏—à–∏–Ω—ã",
        features: ["–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ª–µ—Å–∞—Ö", "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –≤–æ–¥–æ–µ–º—ã —Ä—è–¥–æ–º", "–≠–∫–æ—Ç—Ä–æ–ø—ã"],
        icon: <Landscape />
      },
      {
        name: "–£ –≤–æ–¥–æ–µ–º–æ–≤",
        desc: "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –æ—Ç–¥—ã—Ö —É –≤–æ–¥—ã",
        features: ["–ü–ª—è–∂–∏", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—ã–±–∞–ª–∫–∏", "–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ª–æ–¥–∫–∞—Ö"],
        icon: <WaterDrop />
      },
      {
        name: "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–∑—ã",
        desc: "–° —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
        features: ["–ö–∞—Ñ–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ü–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞", "–î–µ—Ç—Å–∫–∏–µ –∑–æ–Ω—ã"],
        icon: <Restaurant />
      }
    ],
    tipsTitle: "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥?",
    tips: [
      "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –º–µ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π",
      "–£–∑–Ω–∞–π—Ç–µ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö (–ø—Ä–æ–∫–∞—Ç, –µ–¥–∞)",
      "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤",
      "–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
    ],
    backButton: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–ª–æ–≥",
    features: [
      { icon: <DirectionsCar />, label: "–ü–∞—Ä–∫–æ–≤–∫–∞" },
      { icon: <ElectricalServices />, label: "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞" },
      { icon: <Wc />, label: "–°–∞–Ω—É–∑–ª—ã" },
      { icon: <Shower />, label: "–î—É—à–µ–≤—ã–µ" },
      { icon: <Wifi />, label: "Wi-Fi" },
      { icon: <Pets />, label: "Pet-friendly" }
    ],
    regionsTitle: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–æ–≤",
    regions: [
      {
        name: "–ö–∞—Ä–ø–∞—Ç—ã",
        description: "–ú–µ–∫–∫–∞ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ—Ä –∏ —ç–∫–æ—Ç—É—Ä–∏–∑–º–∞"
      },
      {
        name: "–ü–æ–¥–æ–ª—å–µ",
        description: "–£—é—Ç–Ω—ã–µ –∫–µ–º–ø–∏–Ω–≥–∏ —Å—Ä–µ–¥–∏ –ø—Ä–∏—Ä–æ–¥—ã"
      },
      {
        name: "–Æ–≥ –£–∫—Ä–∞–∏–Ω—ã",
        description: "–ö–µ–º–ø–∏–Ω–≥–∏ —É –º–æ—Ä—è –∏ –ª–∏–º–∞–Ω–æ–≤"
      },
      {
        name: "–ö–∏–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        description: "–£–¥–æ–±–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–µ–∑–¥–æ–≤"
      }
    ]
  }
}

function AutocampingGuide() {
  const { currentLanguage } = useLanguage()
  const t = AUTOCAMPING_CONTENT[currentLanguage]
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'))

  return (
    <>
      <Head>
        <title>{t.title}</title>
        <meta name="description" content={t.metaDescription} />
      </Head>

      <Box sx={{ backgroundColor: '#f9f9f9', minHeight: '100vh' }}>
        <Header />
        
        <Container maxWidth="md" sx={{ py: isMobile ? 3 : 6, px: isMobile ? 2 : 4 }}>
          <Paper elevation={3} sx={{ 
            p: isMobile ? 2 : 4, 
            borderRadius: 2, 
            mb: 4,
            '& .MuiListItem-root': {
              py: isMobile ? 0.5 : 1
            }
          }}>
            <Typography variant="h4" component="h1" sx={{ 
              fontWeight: 700,
              textAlign: 'center',
              color: 'primary.main',
              fontSize: isMobile ? '1.5rem' : '2rem',
              mb: 2
            }}>
              {t.title}
            </Typography>

            <Box sx={{ 
              width: '100%',
              height: isMobile ? 200 : 500,
              position: 'relative',
              mb: 4,
              borderRadius: 2,
              overflow: 'hidden',
              boxShadow: theme.shadows[2]
            }}>
              <img
              
                src="/avtokemping.png"
                alt={t.title}
                style={{
                  width: '100%',
                  height: '100%',
                  objectFit: 'cover',
                  objectPosition: 'center'
                }}
              />
            </Box>

            <Typography variant="h6" component="p" sx={{
              textAlign: 'center',
              color: 'text.secondary',
              mb: 4,
              fontSize: isMobile ? '1rem' : '1.1rem'
            }}>
              {t.subtitle}
            </Typography>

            <Box sx={{ mb: 4, p: 3, backgroundColor: '#f0f7f4', borderRadius: 2 }}>
              <Typography variant="h5" component="h3" sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 1,
                fontSize: isMobile ? '1.2rem' : '1.5rem',
                mb: 2,
                color: 'primary.dark'
              }}>
                <DirectionsCar fontSize={isMobile ? 'small' : 'medium'} color="primary" /> 
                {t.intro.split('.')[0]}.
              </Typography>
              <Typography>
                {t.intro.split('.').slice(1).join('.')}.
              </Typography>
            </Box>

            <Box sx={{ mb: 4 }}>
              <Typography variant="h5" component="h2" sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 1,
                fontSize: isMobile ? '1.2rem' : '1.5rem',
                mb: 2,
                color: 'primary.dark'
              }}>
                <Place fontSize={isMobile ? 'small' : 'medium'} color="primary" /> 
                {t.benefitsTitle}
              </Typography>
              
              <List dense={isMobile}>
                {t.benefits.map((item, index) => (
                  <ListItem key={`benefit-${index}`} sx={{ alignItems: 'flex-start', px: 0 }}>
                    <ListItemIcon sx={{ minWidth: 32, mt: '4px' }}>
                      <CheckCircle color="success" fontSize={isMobile ? 'small' : 'medium'} />
                    </ListItemIcon>
                    <Typography sx={{ fontSize: isMobile ? '0.9rem' : '1rem' }}>
                      {item}
                    </Typography>
                  </ListItem>
                ))}
              </List>

              <Box sx={{ 
                display: 'flex', 
                flexWrap: 'wrap', 
                gap: 1, 
                mt: 3,
                justifyContent: 'center'
              }}>
                {t.features.map((feature, index) => (
                  <Chip 
                    key={`feature-${index}`}
                    icon={feature.icon} 
                    label={feature.label} 
                    size={isMobile ? 'small' : 'medium'}
                    sx={{ 
                      '& .MuiChip-icon': { color: 'primary.main' },
                      backgroundColor: 'background.paper'
                    }}
                  />
                ))}
              </Box>
            </Box>

            <Box sx={{ mb: 4 }}>
              <Typography variant="h5" component="h2" sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 1,
                fontSize: isMobile ? '1.2rem' : '1.5rem',
                mb: 2,
                color: 'primary.dark'
              }}>
                <Landscape fontSize={isMobile ? 'small' : 'medium'} color="primary" /> 
                {t.typesTitle}
              </Typography>
              
              <Grid container spacing={3}>
                {t.types.map((type, index) => (
                  <Grid item xs={12} sm={6} key={`type-${index}`}>
                    <Paper elevation={2} sx={{ p: 2, height: '100%', borderRadius: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                        {React.cloneElement(type.icon, { 
                          color: 'primary',
                          fontSize: isMobile ? 'medium' : 'large'
                        })}
                        <Typography variant="h6" sx={{ color: 'primary.main' }}>
                          {type.name}
                        </Typography>
                      </Box>
                      <Typography variant="body2" sx={{ mb: 2 }}>
                        {type.desc}
                      </Typography>
                      <List dense>
                        {type.features.map((feature, idx) => (
                          <ListItem key={`feature-${index}-${idx}`} sx={{ py: 0 }}>
                            <ListItemIcon sx={{ minWidth: 32 }}>
                              <CheckCircle fontSize="small" color="secondary" />
                            </ListItemIcon>
                            <Typography variant="body2">
                              {feature}
                            </Typography>
                          </ListItem>
                        ))}
                      </List>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>
          
            <Box sx={{ mb: 4, mt: 10  }}>
              <Typography variant="h5" component="h2" sx={{
                fontSize: isMobile ? '1.2rem' : '1.5rem',
                mb: 2,
                color: 'primary.dark',
                textAlign: 'center'
              }}>
                {t.regionsTitle}
              </Typography>
              
              <Grid container spacing={2}>
                {t.regions.map((region, index) => (
                  <Grid item xs={12} sm={6} md={3} key={`region-${index}`}>
                    <Paper elevation={1} sx={{ p: 2, height: '100%', textAlign: 'center' }}>
                      <Typography variant="h6" color="primary">
                        {region.name}
                      </Typography>
                      <Typography variant="body2">
                        {region.description}
                      </Typography>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>

            <Box sx={{ mb: 3, mt: 10 }}>
              <Typography variant="h5" component="h2" sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 1,
                fontSize: isMobile ? '1.2rem' : '1.5rem',
                mb: 2,
                color: 'primary.dark'
              }}>
                <DirectionsCar fontSize={isMobile ? 'small' : 'medium'} color="primary" /> 
                {t.tipsTitle}
              </Typography>
              
              <List dense={isMobile}>
                {t.tips.map((item, index) => (
                  <ListItem key={`tip-${index}`} sx={{ alignItems: 'flex-start', px: 0 }}>
                    <ListItemIcon sx={{ minWidth: 32, mt: '4px' }}>
                      <CheckCircle color="info" fontSize={isMobile ? 'small' : 'medium'} />
                    </ListItemIcon>
                    <Typography sx={{ fontSize: isMobile ? '0.9rem' : '1rem' }}>
                      {item}
                    </Typography>
                  </ListItem>
                ))}
              </List>
            </Box>
          </Paper>

          <RelatedPosts currentSlug="autocampingGuide" />

          <Box sx={{ textAlign: 'center', mt: 2 }}>
            <Link href="/blog" passHref legacyBehavior>
              <Button 
                variant="contained" 
                color="primary"
                size={isMobile ? 'medium' : 'large'}
                startIcon={<ArrowBack fontSize={isMobile ? 'small' : 'medium'} />}
                sx={{ 
                  px: isMobile ? 3 : 4,
                  py: 1,
                  fontWeight: 600,
                  fontSize: isMobile ? '0.9rem' : '1rem',
                  borderRadius: 2
                }}
              >
                {t.backButton}
              </Button>
            </Link>
          </Box>
        </Container>
        <Footer />
      </Box>
    </>
  )
}

export default function AutocampingPage() {
  return (
    <Provider store={store}>
      <LanguageProvider>
        <AutocampingGuide />
      </LanguageProvider>
    </Provider>
  )
}