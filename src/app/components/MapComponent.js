




// 'use client';

// import React, { useEffect, useRef, useState } from 'react';
// import { Box, Typography, CircularProgress, Button } from '@mui/material';

// // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ API
// let googleMapsLoading = false;
// let googleMapsLoaded = false;
// let googleMapsLoadCallbacks = [];

// // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
// const CATEGORY_COLORS = {
//   'apart': '#FF5252', // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä
//   'hostel': '#4CAF50', // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ö–æ—Å—Ç–µ–ª–æ–≤
//   'glamping': '#FF9800', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≥–ª–µ–º–ø–∏–Ω–≥–∞
//   'hotel': '#2196F3', // —Å–∏–Ω–∏–π –¥–ª—è –æ—Ç–µ–ª–µ–π
//   'pet-hotel': '#9C27B0', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–µ–ª–µ–π –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
//   'house': '#795548', // –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –¥–ª—è –¥–æ–º–æ–≤
//   'sauna': '#F44336', // —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∞—É–Ω
//   'pansionat': '#607D8B', // —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–æ–≤
//   'cottage': '#FFEB3B', // –∂–µ–ª—Ç—ã–π –¥–ª—è –∫–æ—Ç—Ç–µ–¥–∂–µ–π
//   'coworking': '#E91E63', // —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–≤
//   'autocamping': '#8BC34A', // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–æ–≤
//   'rest-base': '#00BCD4', // –±–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è –±–∞–∑ –æ—Ç–¥—ã—Ö–∞
//   'default': '#1976d2' // —Å–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
// };

// const MapComponent = ({ apartments, onApartmentSelect, centerMode = false, userLocation = null }) => {
//   const mapRef = useRef(null);
//   const googleMapRef = useRef(null);
//   const markersRef = useRef([]);
//   const [mapLoading, setMapLoading] = useState(true);
//   const [mapError, setMapError] = useState(false);

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//   const getCategoryColor = (category) => {
//     if (!category) return CATEGORY_COLORS.default;
    
//     const categoryLower = category.toLowerCase();
    
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
//     if (categoryLower.includes('apart') || categoryLower.includes('–∫–≤–∞—Ä—Ç–∏—Ä')) 
//       return CATEGORY_COLORS.apart;
//     if (categoryLower.includes('hostel') || categoryLower.includes('—Ö–æ—Å—Ç–µ–ª')) 
//       return CATEGORY_COLORS.hostel;
//     if (categoryLower.includes('glamping') || categoryLower.includes('–≥–ª–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–≥–ª—ç–º–ø–∏–Ω–≥')) 
//       return CATEGORY_COLORS.glamping;
//     if (categoryLower.includes('hotel') || categoryLower.includes('–≥–æ—Ç–µ–ª') || categoryLower.includes('–≥–æ—Å—Ç–∏–Ω–∏—Ü')) 
//       return CATEGORY_COLORS.hotel;
//     if (categoryLower.includes('pet') || categoryLower.includes('—Ç–≤–∞—Ä–∏–Ω')) 
//       return CATEGORY_COLORS['pet-hotel'];
//     if (categoryLower.includes('house') || categoryLower.includes('–±—É–¥–∏–Ω–æ–∫') || categoryLower.includes('–¥–æ–º')) 
//       return CATEGORY_COLORS.house;
//     if (categoryLower.includes('sauna') || categoryLower.includes('—Å–∞—É–Ω') || categoryLower.includes('–±–∞–Ω')) 
//       return CATEGORY_COLORS.sauna;
//     if (categoryLower.includes('pansionat') || categoryLower.includes('–ø–∞–Ω—Å—ñ–æ–Ω–∞—Ç') || categoryLower.includes('–ø–∞–Ω—Å–∏–æ–Ω–∞—Ç')) 
//       return CATEGORY_COLORS.pansionat;
//     if (categoryLower.includes('cottage') || categoryLower.includes('–∫–æ—Ç–µ–¥–∂')) 
//       return CATEGORY_COLORS.cottage;
//     if (categoryLower.includes('coworking') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫—ñ–Ω–≥') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫–∏–Ω–≥')) 
//       return CATEGORY_COLORS.coworking;
//     if (categoryLower.includes('autocamping') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥')) 
//       return CATEGORY_COLORS.autocamping;
//     if (categoryLower.includes('rest-base') || categoryLower.includes('–±–∞–∑–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É') || categoryLower.includes('–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞')) 
//       return CATEGORY_COLORS['rest-base'];
    
//     return CATEGORY_COLORS.default;
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//   const getCategoryIcon = (category) => {
//     if (!category) return 'üè†';
    
//     const categoryLower = category.toLowerCase();
//     if (categoryLower.includes('apart') || categoryLower.includes('–∫–≤–∞—Ä—Ç–∏—Ä')) return 'üè†';
//     if (categoryLower.includes('hostel') || categoryLower.includes('—Ö–æ—Å—Ç–µ–ª')) return 'üõèÔ∏è';
//     if (categoryLower.includes('glamping') || categoryLower.includes('–≥–ª–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–≥–ª—ç–º–ø–∏–Ω–≥')) return '‚õ∫';
//     if (categoryLower.includes('hotel') || categoryLower.includes('–≥–æ—Ç–µ–ª') || categoryLower.includes('–≥–æ—Å—Ç–∏–Ω–∏—Ü')) return 'üè®';
//     if (categoryLower.includes('pet') || categoryLower.includes('—Ç–≤–∞—Ä–∏–Ω')) return 'üêæ';
//     if (categoryLower.includes('house') || categoryLower.includes('–±—É–¥–∏–Ω–æ–∫') || categoryLower.includes('–¥–æ–º')) return 'üè°';
//     if (categoryLower.includes('sauna') || categoryLower.includes('—Å–∞—É–Ω') || categoryLower.includes('–±–∞–Ω')) return 'üßñ';
//     if (categoryLower.includes('pansionat') || categoryLower.includes('–ø–∞–Ω—Å—ñ–æ–Ω–∞—Ç') || categoryLower.includes('–ø–∞–Ω—Å–∏–æ–Ω–∞—Ç')) return 'üè¢';
//     if (categoryLower.includes('cottage') || categoryLower.includes('–∫–æ—Ç–µ–¥–∂')) return 'üèòÔ∏è';
//     if (categoryLower.includes('coworking') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫—ñ–Ω–≥') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫–∏–Ω–≥')) return 'üíº';
//     if (categoryLower.includes('autocamping') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥')) return 'üöó';
//     if (categoryLower.includes('rest-base') || categoryLower.includes('–±–∞–∑–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É') || categoryLower.includes('–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞')) return 'üå≤';
//     return 'üè†';
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
//   const loadGoogleMaps = () => {
//     return new Promise((resolve, reject) => {
//       if (googleMapsLoaded) {
//         resolve();
//         return;
//       }

//       if (googleMapsLoading) {
//         googleMapsLoadCallbacks.push(resolve);
//         return;
//       }

//       googleMapsLoading = true;

//       if (window.google && window.google.maps) {
//         googleMapsLoaded = true;
//         googleMapsLoading = false;
//         resolve();
//         return;
//       }

//       const existingScript = document.querySelector('script[src*="maps.googleapis.com"]');
//       if (existingScript) {
//         existingScript.onload = () => {
//           googleMapsLoaded = true;
//           googleMapsLoading = false;
//           resolve();
//           googleMapsLoadCallbacks.forEach(cb => cb());
//           googleMapsLoadCallbacks = [];
//         };
//         return;
//       }

//       const script = document.createElement('script');
//       script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
//       script.async = true;
//       script.defer = true;
      
//       script.onload = () => {
//         googleMapsLoaded = true;
//         googleMapsLoading = false;
//         resolve();
//         googleMapsLoadCallbacks.forEach(cb => cb());
//         googleMapsLoadCallbacks = [];
//       };

//       script.onerror = () => {
//         googleMapsLoading = false;
//         setMapError(true);
//         reject(new Error('Failed to load Google Maps'));
//       };

//       document.head.appendChild(script);
//     });
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
//   const getApartmentCoordinates = (apartment) => {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//     if (apartment.latitude && apartment.longitude) {
//       const lat = parseFloat(apartment.latitude);
//       const lng = parseFloat(apartment.longitude);
//       if (!isNaN(lat) && !isNaN(lng)) {
//         return { lat, lng };
//       }
//     }

//     // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É
//     if ((apartment.city || apartment.street) && window.google) {
//       return new Promise((resolve) => {
//         const address = `${apartment.street || ''} ${apartment.houseNumber || ''}, ${apartment.city || ''}`.trim();
//         if (address.length > 3) {
//           const geocoder = new window.google.maps.Geocoder();
//           geocoder.geocode({ address: address + ', –£–∫—Ä–∞–∏–Ω–∞' }, (results, status) => {
//             if (status === 'OK' && results[0]) {
//               const location = results[0].geometry.location;
//               resolve({
//                 lat: location.lat(),
//                 lng: location.lng()
//               });
//             } else {
//               resolve(getCityCoordinates(apartment.city));
//             }
//           });
//         } else {
//           resolve(getCityCoordinates(apartment.city));
//         }
//       });
//     }

//     return getCityCoordinates(apartment.city);
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
//   const getCityCoordinates = (city) => {
//     const cityCoordinates = {
//       '–∫–∏–µ–≤': { lat: 50.4501, lng: 30.5234 },
//       '–ª—å–≤–æ–≤': { lat: 49.8397, lng: 24.0297 },
//       '–æ–¥–µ—Å—Å–∞': { lat: 46.4825, lng: 30.7233 },
//       '—Ö–∞—Ä—å–∫–æ–≤': { lat: 49.9935, lng: 36.2304 },
//       '–¥–Ω–µ–ø—Ä': { lat: 48.4647, lng: 35.0462 },
//       '–∑–∞–ø–æ—Ä–æ–∂—å–µ': { lat: 47.8388, lng: 35.1396 },
//       '–∏–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫–æ–≤—Å–∫': { lat: 48.9226, lng: 24.7111 },
//       '—Ç–µ—Ä–Ω–æ–ø–æ–ª—å': { lat: 49.5535, lng: 25.5948 },
//       '—á–µ—Ä–Ω–æ–≤—Ü—ã': { lat: 48.2917, lng: 25.9354 },
//       '—É–∂–≥–æ—Ä–æ–¥': { lat: 48.6208, lng: 22.2879 },
//       '–ª—É—Ü–∫': { lat: 50.7476, lng: 25.3252 },
//       '—Ä–æ–≤–Ω–æ': { lat: 50.6199, lng: 26.2516 },
//       '–∂–∏—Ç–æ–º–∏—Ä': { lat: 50.2547, lng: 28.6587 },
//       '—á–µ—Ä–∫–∞—Å—Å—ã': { lat: 49.4444, lng: 32.0598 },
//       '–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π': { lat: 48.5079, lng: 32.2623 },
//       '–Ω–∏–∫–æ–ª–∞–µ–≤': { lat: 46.9750, lng: 31.9946 },
//       '—Ö–µ—Ä—Å–æ–Ω': { lat: 46.6354, lng: 32.6169 },
//       '–ø–æ–ª—Ç–∞–≤–∞': { lat: 49.5883, lng: 34.5514 },
//       '—Å—É–º—ã': { lat: 50.9077, lng: 34.7981 },
//       '—á–µ—Ä–Ω–∏–≥–æ–≤': { lat: 51.4982, lng: 31.2893 }
//     };

//     if (!city) return { lat: 50.4501, lng: 30.5234 };
    
//     const cityLower = city.toLowerCase().trim();
//     return cityCoordinates[cityLower] || { lat: 50.4501, lng: 30.5234 };
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
//   const buildRoute = (apartment) => {
//     getApartmentCoordinates(apartment).then(coords => {
//       let url = `https://www.google.com/maps/dir/`;
      
//       if (userLocation) {
//         url += `${userLocation.lat},${userLocation.lng}/`;
//       }
      
//       url += `${coords.lat},${coords.lng}`;
//       window.open(url, '_blank');
//     });
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
//   const formatAddress = (apartment) => {
//     const parts = [];
//     if (apartment.city) parts.push(apartment.city);
//     if (apartment.street && apartment.houseNumber) {
//       parts.push(`${apartment.street} ${apartment.houseNumber}`);
//     }
//     return parts.join(', ');
//   };

//   const initializeMap = async () => {
//     if (!mapRef.current || !window.google) return;

//     try {
//       const defaultCenter = { lat: 50.4501, lng: 30.5234 };
//       let center = defaultCenter;
//       const coordinates = [];

//       // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
//       for (const apartment of apartments) {
//         const coords = await getApartmentCoordinates(apartment);
//         coordinates.push(coords);
//       }

//       if (apartments.length > 0) {
//         if (centerMode && apartments[0]) {
//           center = coordinates[0] || defaultCenter;
//         } else {
//           const validCoords = coordinates.filter(coord => coord && !isNaN(coord.lat) && !isNaN(coord.lng));
//           if (validCoords.length > 0) {
//             const avgLat = validCoords.reduce((sum, coord) => sum + coord.lat, 0) / validCoords.length;
//             const avgLng = validCoords.reduce((sum, coord) => sum + coord.lng, 0) / validCoords.length;
//             center = { lat: avgLat, lng: avgLng };
//           }
//         }
//       }

//       const map = new window.google.maps.Map(mapRef.current, {
//         center: center,
//         zoom: apartments.length === 1 ? 14 : 6,
//         mapTypeControl: true,
//         streetViewControl: true,
//         fullscreenControl: true,
//         styles: [
//           {
//             featureType: "poi",
//             elementType: "labels",
//             stylers: [{ visibility: "on" }]
//           }
//         ]
//       });

//       googleMapRef.current = map;

//       // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
//       markersRef.current.forEach(marker => marker.setMap(null));
//       markersRef.current = [];

//       // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
//       for (let i = 0; i < apartments.length; i++) {
//         const apartment = apartments[i];
//         const position = coordinates[i] || defaultCenter;

//         if (!position || isNaN(position.lat) || isNaN(position.lng)) {
//           continue;
//         }

//         const categoryColor = getCategoryColor(apartment.category);

//         // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞ —Å —Ü–≤–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//         const markerIcon = {
//           path: window.google.maps.SymbolPath.CIRCLE,
//           fillColor: categoryColor,
//           fillOpacity: 0.9,
//           strokeColor: '#ffffff',
//           strokeWeight: 2,
//           scale: 10
//         };

//         const marker = new window.google.maps.Marker({
//           position: position,
//           map: map,
//           title: apartment.objectName || apartment.category || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã',
//           icon: markerIcon,
//           animation: window.google.maps.Animation.DROP
//         });

//         const address = formatAddress(apartment);
//         const mainPhoto = apartment.photos && apartment.photos[0] 
//           ? apartment.photos[0] 
//           : '/placeholder-apartment.jpg';

//         const infoWindow = new window.google.maps.InfoWindow({
//           content: `
//             <div style="padding: 16px; max-width: 300px; font-family: Arial, sans-serif;">
//               <div style="display: flex; align-items: center; margin-bottom: 12px;">
//                 <span style="font-size: 24px; margin-right: 8px;">${getCategoryIcon(apartment.category)}</span>
//                 <div>
//                   <h3 style="margin: 0 0 4px 0; font-size: 16px; color: #1976d2; font-weight: bold;">
//                     ${apartment.objectName || apartment.category || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'}
//                   </h3>
//                   <div style="background: ${categoryColor}; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; display: inline-block;">
//                     ${apartment.category || '–ñ–∏–ª—å–µ'}
//                   </div>
//                 </div>
//               </div>
              
//               <img src="${mainPhoto}" 
//                    alt="${apartment.objectName || '–§–æ—Ç–æ'}" 
//                    style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px; margin-bottom: 12px;" />
              
//               <p style="margin: 0 0 8px 0; font-size: 14px; color: #333; display: flex; align-items: center;">
//                 <span style="color: #666; margin-right: 4px;">üìç</span>
//                 ${address}
//               </p>
              
//               ${apartment.district ? `<p style="margin: 0 0 4px 0; font-size: 12px; color: #666;">–†–∞–π–æ–Ω: ${apartment.district}</p>` : ''}
//               ${apartment.metro ? `<p style="margin: 0 0 8px 0; font-size: 12px; color: #666;">–ú–µ—Ç—Ä–æ: ${apartment.metro}</p>` : ''}
              
//               <p style="margin: 0 0 12px 0; font-size: 18px; font-weight: bold; color: #2e7d32;">
//                 ${apartment.price ? apartment.price + ' –≥—Ä–Ω/–Ω–æ—á—å' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
//               </p>
              
//               <button onclick="window.open('https://www.google.com/maps/dir/?api=1&destination=${position.lat},${position.lng}', '_blank')"
//                       style="background: #1976d2; color: white; border: none; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-size: 14px; width: 100%; display: flex; align-items: center; justify-content: center;">
//                 <span style="margin-right: 8px;">üöó</span>
//                 –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
//               </button>
//             </div>
//           `
//         });

//         marker.addListener('click', () => {
//           markersRef.current.forEach(m => {
//             if (m.infoWindow) m.infoWindow.close();
//           });
          
//           infoWindow.open(map, marker);
//           marker.infoWindow = infoWindow;
          
//           if (onApartmentSelect) {
//             onApartmentSelect(apartment);
//           }
//         });

//         marker.infoWindow = infoWindow;
//         markersRef.current.push(marker);
//       }

//       // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
//       if (markersRef.current.length > 0 && !centerMode) {
//         const bounds = new window.google.maps.LatLngBounds();
//         markersRef.current.forEach(marker => {
//           bounds.extend(marker.getPosition());
//         });
        
//         map.fitBounds(bounds, { 
//           padding: { top: 50, right: 50, bottom: 50, left: 50 }
//         });

//         const zoom = map.getZoom();
//         if (zoom > 16) {
//           map.setZoom(16);
//         }
//       }

//       setMapLoading(false);
//     } catch (error) {
//       console.error('Map initialization error:', error);
//       setMapError(true);
//       setMapLoading(false);
//     }
//   };

//   useEffect(() => {
//     const initMap = async () => {
//       try {
//         setMapLoading(true);
//         setMapError(false);
        
//         await loadGoogleMaps();
        
//         if (window.google && window.google.maps) {
//           await initializeMap();
//         } else {
//           throw new Error('Google Maps API not loaded');
//         }
//       } catch (error) {
//         console.error('Map loading error:', error);
//         setMapError(true);
//         setMapLoading(false);
//       }
//     };

//     initMap();

//     return () => {
//       markersRef.current.forEach(marker => {
//         if (marker.infoWindow) {
//           marker.infoWindow.close();
//         }
//         marker.setMap(null);
//       });
//       markersRef.current = [];
//     };
//   }, [apartments, centerMode, userLocation]);

//   if (mapError) {
//     return (
//       <Box sx={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>
//         <Typography color="error" sx={{ mb: 2 }}>
//           –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É
//         </Typography>
//         <Button 
//           variant="contained" 
//           onClick={() => {
//             setMapError(false);
//             setMapLoading(true);
//             setTimeout(() => {
//               const initMap = async () => {
//                 try {
//                   await loadGoogleMaps();
//                   if (window.google && window.google.maps) {
//                     await initializeMap();
//                   }
//                 } catch (error) {
//                   setMapError(true);
//                   setMapLoading(false);
//                 }
//               };
//               initMap();
//             }, 100);
//           }}
//         >
//           –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
//         </Button>
//       </Box>
//     );
//   }

//   return (
//     <Box sx={{ width: '100%', height: '100%', position: 'relative' }}>
//       {mapLoading && (
//         <Box sx={{ 
//           position: 'absolute', 
//           top: 0, 
//           left: 0, 
//           right: 0, 
//           bottom: 0, 
//           display: 'flex', 
//           alignItems: 'center', 
//           justifyContent: 'center',
//           backgroundColor: 'rgba(255,255,255,0.8)',
//           zIndex: 1000
//         }}>
//           <CircularProgress />
//           <Typography sx={{ ml: 2 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</Typography>
//         </Box>
//       )}
//       <div 
//         ref={mapRef} 
//         style={{ 
//           width: '100%', 
//           height: '100%',
//           borderRadius: '8px'
//         }} 
//       />
//     </Box>
//   );
// };

// export default MapComponent;



'use client';

import React, { useEffect, useRef, useState } from 'react';
import { Box, Typography, CircularProgress, Button } from '@mui/material';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ API
let googleMapsLoading = false;
let googleMapsLoaded = false;
let googleMapsLoadCallbacks = [];

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã Google Maps)
const CATEGORY_COLORS = {
  'apart': '#EA4335', // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä
  'hostel': '#34A853', // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ö–æ—Å—Ç–µ–ª–æ–≤
  'glamping': '#FBBC05', // –∂–µ–ª—Ç—ã–π –¥–ª—è –≥–ª–µ–º–ø–∏–Ω–≥–∞
  'hotel': '#4285F4', // —Å–∏–Ω–∏–π –¥–ª—è –æ—Ç–µ–ª–µ–π
  'pet-hotel': '#9C27B0', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–µ–ª–µ–π –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
  'house': '#795548', // –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –¥–ª—è –¥–æ–º–æ–≤
  'sauna': '#F44336', // —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∞—É–Ω
  'pansionat': '#607D8B', // —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–æ–≤
  'cottage': '#FF9800', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∫–æ—Ç—Ç–µ–¥–∂–µ–π
  'coworking': '#E91E63', // —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–≤
  'autocamping': '#4CAF50', // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥–æ–≤
  'rest-base': '#00BCD4', // –±–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è –±–∞–∑ –æ—Ç–¥—ã—Ö–∞
  'default': '#EA4335' // –∫—Ä–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

const MapComponent = ({ apartments, onApartmentSelect, centerMode = false, userLocation = null }) => {
  const mapRef = useRef(null);
  const googleMapRef = useRef(null);
  const markersRef = useRef([]);
  const [mapLoading, setMapLoading] = useState(true);
  const [mapError, setMapError] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryColor = (category) => {
    if (!category) return CATEGORY_COLORS.default;
    
    const categoryLower = category.toLowerCase();
    
    if (categoryLower.includes('apart') || categoryLower.includes('–∫–≤–∞—Ä—Ç–∏—Ä')) 
      return CATEGORY_COLORS.apart;
    if (categoryLower.includes('hostel') || categoryLower.includes('—Ö–æ—Å—Ç–µ–ª')) 
      return CATEGORY_COLORS.hostel;
    if (categoryLower.includes('glamping') || categoryLower.includes('–≥–ª–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–≥–ª—ç–º–ø–∏–Ω–≥')) 
      return CATEGORY_COLORS.glamping;
    if (categoryLower.includes('hotel') || categoryLower.includes('–≥–æ—Ç–µ–ª') || categoryLower.includes('–≥–æ—Å—Ç–∏–Ω–∏—Ü')) 
      return CATEGORY_COLORS.hotel;
    if (categoryLower.includes('pet') || categoryLower.includes('—Ç–≤–∞—Ä–∏–Ω')) 
      return CATEGORY_COLORS['pet-hotel'];
    if (categoryLower.includes('house') || categoryLower.includes('–±—É–¥–∏–Ω–æ–∫') || categoryLower.includes('–¥–æ–º')) 
      return CATEGORY_COLORS.house;
    if (categoryLower.includes('sauna') || categoryLower.includes('—Å–∞—É–Ω') || categoryLower.includes('–±–∞–Ω')) 
      return CATEGORY_COLORS.sauna;
    if (categoryLower.includes('pansionat') || categoryLower.includes('–ø–∞–Ω—Å—ñ–æ–Ω–∞—Ç') || categoryLower.includes('–ø–∞–Ω—Å–∏–æ–Ω–∞—Ç')) 
      return CATEGORY_COLORS.pansionat;
    if (categoryLower.includes('cottage') || categoryLower.includes('–∫–æ—Ç–µ–¥–∂')) 
      return CATEGORY_COLORS.cottage;
    if (categoryLower.includes('coworking') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫—ñ–Ω–≥') || categoryLower.includes('–∫–æ–≤–æ—Ä–∫–∏–Ω–≥')) 
      return CATEGORY_COLORS.coworking;
    if (categoryLower.includes('autocamping') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø—ñ–Ω–≥') || categoryLower.includes('–∞–≤—Ç–æ–∫–µ–º–ø–∏–Ω–≥')) 
      return CATEGORY_COLORS.autocamping;
    if (categoryLower.includes('rest-base') || categoryLower.includes('–±–∞–∑–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É') || categoryLower.includes('–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞')) 
      return CATEGORY_COLORS['rest-base'];
    
    return CATEGORY_COLORS.default;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞
  const getMarkerIcon = (color) => {
    return {
      url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`
        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
          <path fill="${color}" d="M20 0C12.3 0 6 6.3 6 14c0 10.5 14 26 14 26s14-15.5 14-26C34 6.3 27.7 0 20 0z"/>
          <circle fill="white" cx="20" cy="14" r="6"/>
        </svg>
      `)}`,
      scaledSize: new window.google.maps.Size(40, 40),
      anchor: new window.google.maps.Point(20, 40),
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
  const loadGoogleMaps = () => {
    return new Promise((resolve, reject) => {
      if (googleMapsLoaded) {
        resolve();
        return;
      }

      if (googleMapsLoading) {
        googleMapsLoadCallbacks.push(resolve);
        return;
      }

      googleMapsLoading = true;

      if (window.google && window.google.maps) {
        googleMapsLoaded = true;
        googleMapsLoading = false;
        resolve();
        return;
      }

      const existingScript = document.querySelector('script[src*="maps.googleapis.com"]');
      if (existingScript) {
        existingScript.onload = () => {
          googleMapsLoaded = true;
          googleMapsLoading = false;
          resolve();
          googleMapsLoadCallbacks.forEach(cb => cb());
          googleMapsLoadCallbacks = [];
        };
        return;
      }

      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        googleMapsLoaded = true;
        googleMapsLoading = false;
        resolve();
        googleMapsLoadCallbacks.forEach(cb => cb());
        googleMapsLoadCallbacks = [];
      };

      script.onerror = () => {
        googleMapsLoading = false;
        setMapError(true);
        reject(new Error('Failed to load Google Maps'));
      };

      document.head.appendChild(script);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
  const getApartmentCoordinates = (apartment) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (apartment.latitude && apartment.longitude) {
      const lat = parseFloat(apartment.latitude);
      const lng = parseFloat(apartment.longitude);
      if (!isNaN(lat) && !isNaN(lng)) {
        return { lat, lng };
      }
    }

    // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É
    if ((apartment.city || apartment.street) && window.google) {
      return new Promise((resolve) => {
        const address = `${apartment.street || ''} ${apartment.houseNumber || ''}, ${apartment.city || ''}`.trim();
        if (address.length > 3) {
          const geocoder = new window.google.maps.Geocoder();
          geocoder.geocode({ address: address + ', –£–∫—Ä–∞–∏–Ω–∞' }, (results, status) => {
            if (status === 'OK' && results[0]) {
              const location = results[0].geometry.location;
              resolve({
                lat: location.lat(),
                lng: location.lng()
              });
            } else {
              resolve(getCityCoordinates(apartment.city));
            }
          });
        } else {
          resolve(getCityCoordinates(apartment.city));
        }
      });
    }

    return getCityCoordinates(apartment.city);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
  const getCityCoordinates = (city) => {
    const cityCoordinates = {
      '–∫–∏–µ–≤': { lat: 50.4501, lng: 30.5234 },
      '–ª—å–≤–æ–≤': { lat: 49.8397, lng: 24.0297 },
      '–æ–¥–µ—Å—Å–∞': { lat: 46.4825, lng: 30.7233 },
      '—Ö–∞—Ä—å–∫–æ–≤': { lat: 49.9935, lng: 36.2304 },
      '–¥–Ω–µ–ø—Ä': { lat: 48.4647, lng: 35.0462 },
      '–∑–∞–ø–æ—Ä–æ–∂—å–µ': { lat: 47.8388, lng: 35.1396 },
      '–∏–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫–æ–≤—Å–∫': { lat: 48.9226, lng: 24.7111 },
      '—Ç–µ—Ä–Ω–æ–ø–æ–ª—å': { lat: 49.5535, lng: 25.5948 },
      '—á–µ—Ä–Ω–æ–≤—Ü—ã': { lat: 48.2917, lng: 25.9354 },
      '—É–∂–≥–æ—Ä–æ–¥': { lat: 48.6208, lng: 22.2879 },
      '–ª—É—Ü–∫': { lat: 50.7476, lng: 25.3252 },
      '—Ä–æ–≤–Ω–æ': { lat: 50.6199, lng: 26.2516 },
      '–∂–∏—Ç–æ–º–∏—Ä': { lat: 50.2547, lng: 28.6587 },
      '—á–µ—Ä–∫–∞—Å—Å—ã': { lat: 49.4444, lng: 32.0598 },
      '–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π': { lat: 48.5079, lng: 32.2623 },
      '–Ω–∏–∫–æ–ª–∞–µ–≤': { lat: 46.9750, lng: 31.9946 },
      '—Ö–µ—Ä—Å–æ–Ω': { lat: 46.6354, lng: 32.6169 },
      '–ø–æ–ª—Ç–∞–≤–∞': { lat: 49.5883, lng: 34.5514 },
      '—Å—É–º—ã': { lat: 50.9077, lng: 34.7981 },
      '—á–µ—Ä–Ω–∏–≥–æ–≤': { lat: 51.4982, lng: 31.2893 }
    };

    if (!city) return { lat: 50.4501, lng: 30.5234 };
    
    const cityLower = city.toLowerCase().trim();
    return cityCoordinates[cityLower] || { lat: 50.4501, lng: 30.5234 };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const formatAddress = (apartment) => {
    const parts = [];
    if (apartment.city) parts.push(apartment.city);
    if (apartment.street && apartment.houseNumber) {
      parts.push(`${apartment.street} ${apartment.houseNumber}`);
    }
    return parts.join(', ');
  };

  const initializeMap = async () => {
    if (!mapRef.current || !window.google) return;

    try {
      const defaultCenter = { lat: 50.4501, lng: 30.5234 };
      let center = defaultCenter;
      const coordinates = [];

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
      for (const apartment of apartments) {
        const coords = await getApartmentCoordinates(apartment);
        coordinates.push(coords);
      }

      if (apartments.length > 0) {
        if (centerMode && apartments[0]) {
          center = coordinates[0] || defaultCenter;
        } else {
          const validCoords = coordinates.filter(coord => coord && !isNaN(coord.lat) && !isNaN(coord.lng));
          if (validCoords.length > 0) {
            const avgLat = validCoords.reduce((sum, coord) => sum + coord.lat, 0) / validCoords.length;
            const avgLng = validCoords.reduce((sum, coord) => sum + coord.lng, 0) / validCoords.length;
            center = { lat: avgLat, lng: avgLng };
          }
        }
      }

      const map = new window.google.maps.Map(mapRef.current, {
        center: center,
        zoom: apartments.length === 1 ? 14 : 6,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true,
        styles: [
          {
            featureType: "poi",
            elementType: "labels",
            stylers: [{ visibility: "on" }]
          }
        ]
      });

      googleMapRef.current = map;

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
      markersRef.current.forEach(marker => marker.setMap(null));
      markersRef.current = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
      for (let i = 0; i < apartments.length; i++) {
        const apartment = apartments[i];
        const position = coordinates[i] || defaultCenter;

        if (!position || isNaN(position.lat) || isNaN(position.lng)) {
          continue;
        }

        const categoryColor = getCategoryColor(apartment.category);
        const markerIcon = getMarkerIcon(categoryColor);

        const marker = new window.google.maps.Marker({
          position: position,
          map: map,
          title: apartment.objectName || apartment.category || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã',
          icon: markerIcon,
          animation: window.google.maps.Animation.DROP
        });

        const address = formatAddress(apartment);
        const mainPhoto = apartment.photos && apartment.photos[0] 
          ? apartment.photos[0] 
          : '/placeholder-apartment.jpg';

        const infoWindow = new window.google.maps.InfoWindow({
          content: `
            <div style="padding: 0; max-width: 280px; font-family: Arial, sans-serif; cursor: pointer; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
              <!-- –ö–ê–¢–ï–ì–û–†–ò–Ø –í –í–ï–†–•–£ –ë–ï–ó –û–¢–°–¢–£–ü–û–í -->
              <div style="background: ${categoryColor}; color: white; padding: 8px 12px; text-align: center; font-weight: bold; font-size: 14px;">
                ${apartment.category || '–ñ–∏–ª—å–µ'}
              </div>
              
              <!-- –§–û–¢–û -->
              <img src="${mainPhoto}" 
                   alt="${apartment.objectName || '–§–æ—Ç–æ'}" 
                   style="width: 100%; height: 160px; object-fit: cover; display: block;" />
              
              <!-- –°–û–î–ï–†–ñ–ò–ú–û–ï -->
              <div style="padding: 12px;">
                <!-- –ó–ê–ì–û–õ–û–í–û–ö -->
                <h3 style="margin: 0 0 8px 0; font-size: 16px; color: #1976d2; font-weight: bold; line-height: 1.3;">
                  ${apartment.objectName || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'}
                </h3>
                
                <!-- –ê–î–†–ï–° -->
                <p style="margin: 0 0 8px 0; font-size: 14px; color: #333; display: flex; align-items: flex-start; line-height: 1.4;">
                  <span style="color: #666; margin-right: 6px; flex-shrink: 0;">üìç</span>
                  <span>${address}</span>
                </p>
                
                <!-- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø -->
                ${apartment.district ? `<p style="margin: 0 0 4px 0; font-size: 13px; color: #666; line-height: 1.3;">–†–∞–π–æ–Ω: ${apartment.district}</p>` : ''}
                ${apartment.metro ? `<p style="margin: 0 0 8px 0; font-size: 13px; color: #666; line-height: 1.3;">–ú–µ—Ç—Ä–æ: ${apartment.metro}</p>` : ''}
                
                <!-- –¶–ï–ù–ê -->
                <p style="margin: 0 0 12px 0; font-size: 18px; font-weight: bold; color: #2e7d32; line-height: 1.2;">
                  ${apartment.price ? apartment.price + ' –≥—Ä–Ω/–Ω–æ—á—å' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </p>
                
                <!-- –ö–ù–û–ü–ö–ê –ü–†–û–õ–û–ñ–ò–¢–¨ –ú–ê–†–®–†–£–¢ -->
                <button onclick="event.stopPropagation(); window.open('https://www.google.com/maps/dir/?api=1&destination=${position.lat},${position.lng}', '_blank')"
                        style="background: #1976d2; color: white; border: none; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-size: 14px; width: 100%; display: flex; align-items: center; justify-content: center;">
                  <span style="margin-right: 8px;">üöó</span>
                  –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </button>
              </div>
            </div>
          `
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä
        marker.addListener('click', () => {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ infoWindow
          markersRef.current.forEach(m => {
            if (m.infoWindow) m.infoWindow.close();
          });
          
          infoWindow.open(map, marker);
          marker.infoWindow = infoWindow;
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é)
        const handleInfoWindowClick = () => {
          if (onApartmentSelect) {
            onApartmentSelect(apartment);
          }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è infoWindow
        marker.addListener('click', () => {
          setTimeout(() => {
            const infoWindowElement = document.querySelector('.gm-style-iw');
            if (infoWindowElement) {
              infoWindowElement.addEventListener('click', handleInfoWindowClick);
            }
          }, 100);
        });

        marker.infoWindow = infoWindow;
        markersRef.current.push(marker);
      }

      // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
      if (markersRef.current.length > 0 && !centerMode) {
        const bounds = new window.google.maps.LatLngBounds();
        markersRef.current.forEach(marker => {
          bounds.extend(marker.getPosition());
        });
        
        map.fitBounds(bounds, { 
          padding: { top: 50, right: 50, bottom: 50, left: 50 }
        });

        const zoom = map.getZoom();
        if (zoom > 16) {
          map.setZoom(16);
        }
      }

      setMapLoading(false);
    } catch (error) {
      console.error('Map initialization error:', error);
      setMapError(true);
      setMapLoading(false);
    }
  };

  useEffect(() => {
    const initMap = async () => {
      try {
        setMapLoading(true);
        setMapError(false);
        
        await loadGoogleMaps();
        
        if (window.google && window.google.maps) {
          await initializeMap();
        } else {
          throw new Error('Google Maps API not loaded');
        }
      } catch (error) {
        console.error('Map loading error:', error);
        setMapError(true);
        setMapLoading(false);
      }
    };

    initMap();

    return () => {
      markersRef.current.forEach(marker => {
        if (marker.infoWindow) {
          marker.infoWindow.close();
        }
        marker.setMap(null);
      });
      markersRef.current = [];
    };
  }, [apartments, centerMode, userLocation]);

  if (mapError) {
    return (
      <Box sx={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>
        <Typography color="error" sx={{ mb: 2 }}>
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É
        </Typography>
        <Button 
          variant="contained" 
          onClick={() => {
            setMapError(false);
            setMapLoading(true);
            setTimeout(() => {
              const initMap = async () => {
                try {
                  await loadGoogleMaps();
                  if (window.google && window.google.maps) {
                    await initializeMap();
                  }
                } catch (error) {
                  setMapError(true);
                  setMapLoading(false);
                }
              };
              initMap();
            }, 100);
          }}
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ width: '100%', height: '100%', position: 'relative' }}>
      {mapLoading && (
        <Box sx={{ 
          position: 'absolute', 
          top: 0, 
          left: 0, 
          right: 0, 
          bottom: 0, 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center',
          backgroundColor: 'rgba(255,255,255,0.8)',
          zIndex: 1000
        }}>
          <CircularProgress />
          <Typography sx={{ ml: 2 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</Typography>
        </Box>
      )}
      <div 
        ref={mapRef} 
        style={{ 
          width: '100%', 
          height: '100%',
          borderRadius: '8px'
        }} 
      />
    </Box>
  );
};

export default MapComponent;